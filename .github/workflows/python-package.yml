name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run a one-line script to Say Hi for Polaris-7thMinute
        run: echo Hello, Polaris Project!

      - name: Check Out Repo
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR Backend
        id: build-image_backend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: githubactions
          IMAGE_TAG: latest
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t 029086201010.dkr.ecr.ap-southeast-1.amazonaws.com/polaris:latest ./
          docker push 029086201010.dkr.ecr.ap-southeast-1.amazonaws.com/polaris:latest
          echo "::set-output name=image::029086201010.dkr.ecr.ap-southeast-1.amazonaws.com/polaris:latest"


#       - name: Amazon ECS task definition
#         id: task-def
#         uses: aws-actions/amazon-ecs-render-task-definition@v1
#         with:
#           task-definition: mytaskdef.json
#           container-name: sample-app
#           image: ${{ steps.build-image.outputs.image }}

#       - name: Deploy Amazon ECS task definition
#         uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#         with:
#           task-definition: ${{ steps.task-def.outputs.task-definition }}
#           service: delvify_service_one
#           cluster: sample-app
#           wait-for-service-stability: true


### Commented because we don't require to use docker, we shall use aws-ecr instead ####
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v1

#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v1

#      - name: Login to Docker Hub
#        uses: docker/login-action@v1
#        with:
#          username: ${{ secrets.DOCKER_HUB_USERNAME }}
#          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

#      - name: Build and push backend_pub
#        id: docker_build_backend
#        uses: docker/build-push-action@v2
#        with:
#          context: ./
#          file: ./backend/Dockerfile
#          push: true
#          tags: delvifyhk/one_backend:latest

#      - name: Build and push frontend_pub
#        id: docker_build_frontend
#        uses: docker/build-push-action@v2
#        with:
#          context: ./frontend/.
#          file: ./frontend/Dockerfile
#          push: true
#          tags: delvifyhk/one_frontend:latest

#     - name: Image digest
#       run: echo ${{ steps.docker_build.outputs.digest }}
###### Comment ends here ###########

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script - complete building
        run: |
          echo Add other actions to build for Polaris,
          echo test, and deploy your project, and deploy the polaris Application.